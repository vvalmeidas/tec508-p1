
List of pre-defined events (to be used in -e):

  branch-instructions OR branches                    [Hardware event]
  branch-misses                                      [Hardware event]
  bus-cycles                                         [Hardware event]
  cache-misses                                       [Hardware event]
  cache-references                                   [Hardware event]
  cpu-cycles OR cycles                               [Hardware event]
  instructions                                       [Hardware event]
  ref-cycles                                         [Hardware event]

  alignment-faults                                   [Software event]
  bpf-output                                         [Software event]
  context-switches OR cs                             [Software event]
  cpu-clock                                          [Software event]
  cpu-migrations OR migrations                       [Software event]
  dummy                                              [Software event]
  emulation-faults                                   [Software event]
  major-faults                                       [Software event]
  minor-faults                                       [Software event]
  page-faults OR faults                              [Software event]
  task-clock                                         [Software event]

  L1-dcache-load-misses                              [Hardware cache event]
  L1-dcache-loads                                    [Hardware cache event]
  L1-dcache-stores                                   [Hardware cache event]
  L1-icache-load-misses                              [Hardware cache event]
  LLC-load-misses                                    [Hardware cache event]
  LLC-loads                                          [Hardware cache event]
  LLC-store-misses                                   [Hardware cache event]
  LLC-stores                                         [Hardware cache event]
  branch-load-misses                                 [Hardware cache event]
  branch-loads                                       [Hardware cache event]
  dTLB-load-misses                                   [Hardware cache event]
  dTLB-loads                                         [Hardware cache event]
  dTLB-store-misses                                  [Hardware cache event]
  dTLB-stores                                        [Hardware cache event]
  iTLB-load-misses                                   [Hardware cache event]
  iTLB-loads                                         [Hardware cache event]
  node-load-misses                                   [Hardware cache event]
  node-loads                                         [Hardware cache event]
  node-store-misses                                  [Hardware cache event]
  node-stores                                        [Hardware cache event]

  branch-instructions OR cpu/branch-instructions/    [Kernel PMU event]
  branch-misses OR cpu/branch-misses/                [Kernel PMU event]
  bus-cycles OR cpu/bus-cycles/                      [Kernel PMU event]
  cache-misses OR cpu/cache-misses/                  [Kernel PMU event]
  cache-references OR cpu/cache-references/          [Kernel PMU event]
  cpu-cycles OR cpu/cpu-cycles/                      [Kernel PMU event]
  cstate_core/c3-residency/                          [Kernel PMU event]
  cstate_core/c6-residency/                          [Kernel PMU event]
  cstate_core/c7-residency/                          [Kernel PMU event]
  cstate_pkg/c2-residency/                           [Kernel PMU event]
  cstate_pkg/c3-residency/                           [Kernel PMU event]
  cstate_pkg/c6-residency/                           [Kernel PMU event]
  cstate_pkg/c7-residency/                           [Kernel PMU event]
  instructions OR cpu/instructions/                  [Kernel PMU event]
  intel_pt//                                         [Kernel PMU event]
  mem-loads OR cpu/mem-loads/                        [Kernel PMU event]
  mem-stores OR cpu/mem-stores/                      [Kernel PMU event]
  msr/aperf/                                         [Kernel PMU event]
  msr/mperf/                                         [Kernel PMU event]
  msr/smi/                                           [Kernel PMU event]
  msr/tsc/                                           [Kernel PMU event]
  power/energy-cores/                                [Kernel PMU event]
  power/energy-gpu/                                  [Kernel PMU event]
  power/energy-pkg/                                  [Kernel PMU event]
  power/energy-ram/                                  [Kernel PMU event]
  ref-cycles OR cpu/ref-cycles/                      [Kernel PMU event]
  topdown-fetch-bubbles OR cpu/topdown-fetch-bubbles/ [Kernel PMU event]
  topdown-recovery-bubbles OR cpu/topdown-recovery-bubbles/ [Kernel PMU event]
  topdown-slots-issued OR cpu/topdown-slots-issued/  [Kernel PMU event]
  topdown-slots-retired OR cpu/topdown-slots-retired/ [Kernel PMU event]
  topdown-total-slots OR cpu/topdown-total-slots/    [Kernel PMU event]
  uncore_cbox_0/clockticks/                          [Kernel PMU event]
  uncore_cbox_1/clockticks/                          [Kernel PMU event]
  uncore_imc/data_reads/                             [Kernel PMU event]
  uncore_imc/data_writes/                            [Kernel PMU event]

cache:
  l1d.replacement                                   
       [L1D data line replacements]
  l1d_pend_miss.fb_full                             
       [Cycles a demand request was blocked due to Fill Buffers inavailability]
  l1d_pend_miss.pending                             
       [L1D miss oustandings duration in cycles]
  l1d_pend_miss.pending_cycles                      
       [Cycles with L1D load Misses outstanding]
  l1d_pend_miss.pending_cycles_any                  
       [Cycles with L1D load Misses outstanding from any thread on physical core]
  l2_demand_rqsts.wb_hit                            
       [Not rejected writebacks that hit L2 cache]
  l2_lines_in.all                                   
       [L2 cache lines filling L2]
  l2_lines_in.e                                     
       [L2 cache lines in E state filling L2]
  l2_lines_in.i                                     
       [L2 cache lines in I state filling L2]
  l2_lines_in.s                                     
       [L2 cache lines in S state filling L2]
  l2_lines_out.demand_clean                         
       [Clean L2 cache lines evicted by demand]
  l2_rqsts.all_code_rd                              
       [L2 code requests]
  l2_rqsts.all_demand_data_rd                       
       [Demand Data Read requests]
  l2_rqsts.all_demand_miss                          
       [Demand requests that miss L2 cache]
  l2_rqsts.all_demand_references                    
       [Demand requests to L2 cache]
  l2_rqsts.all_pf                                   
       [Requests from L2 hardware prefetchers]
  l2_rqsts.all_rfo                                  
       [RFO requests to L2 cache]
  l2_rqsts.code_rd_hit                              
       [L2 cache hits when fetching instructions, code reads]
  l2_rqsts.code_rd_miss                             
       [L2 cache misses when fetching instructions]
  l2_rqsts.demand_data_rd_hit                       
       [Demand Data Read requests that hit L2 cache]
  l2_rqsts.demand_data_rd_miss                      
       [Demand Data Read miss L2, no rejects]
  l2_rqsts.l2_pf_hit                                
       [L2 prefetch requests that hit L2 cache]
  l2_rqsts.l2_pf_miss                               
       [L2 prefetch requests that miss L2 cache]
  l2_rqsts.miss                                     
       [All requests that miss L2 cache]
  l2_rqsts.references                               
       [All L2 requests]
  l2_rqsts.rfo_hit                                  
       [RFO requests that hit L2 cache]
  l2_rqsts.rfo_miss                                 
       [RFO requests that miss L2 cache]
  l2_trans.all_pf                                   
       [L2 or L3 HW prefetches that access L2 cache]
  l2_trans.all_requests                             
       [Transactions accessing L2 pipe]
  l2_trans.code_rd                                  
       [L2 cache accesses when fetching instructions]
  l2_trans.demand_data_rd                           
       [Demand Data Read requests that access L2 cache]
  l2_trans.l1d_wb                                   
       [L1D writebacks that access L2 cache]
  l2_trans.l2_fill                                  
       [L2 fill requests that access L2 cache]
  l2_trans.l2_wb                                    
       [L2 writebacks that access L2 cache]
  l2_trans.rfo                                      
       [RFO requests that access L2 cache]
  lock_cycles.cache_lock_duration                   
       [Cycles when L1D is locked]
  longest_lat_cache.miss                            
       [Core-originated cacheable demand requests missed L3]
  longest_lat_cache.reference                       
       [Core-originated cacheable demand requests that refer to L3]
  mem_load_uops_l3_hit_retired.xsnp_hit             
       [Retired load uops which data sources were L3 and cross-core snoop hits in on-pkg core cache Spec update: BDM100. Supports address
        when precise (Precise event)]
  mem_load_uops_l3_hit_retired.xsnp_hitm            
       [Retired load uops which data sources were HitM responses from shared L3 Spec update: BDM100. Supports address when precise (Precise
        event)]
  mem_load_uops_l3_hit_retired.xsnp_miss            
       [Retired load uops which data sources were L3 hit and cross-core snoop missed in on-pkg core cache Spec update: BDM100. Supports
        address when precise (Precise event)]
  mem_load_uops_l3_hit_retired.xsnp_none            
       [Retired load uops which data sources were hits in L3 without snoops required Spec update: BDM100. Supports address when precise
        (Precise event)]
  mem_load_uops_l3_miss_retired.local_dram          
       [Data from local DRAM either Snoop not needed or Snoop Miss (RspI) Spec update: BDE70, BDM100. Supports address when precise (Precise
        event)]
  mem_load_uops_retired.hit_lfb                     
       [Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not
        ready Supports address when precise (Precise event)]
  mem_load_uops_retired.l1_hit                      
       [Retired load uops with L1 cache hits as data sources Supports address when precise (Precise event)]
  mem_load_uops_retired.l1_miss                     
       [Retired load uops misses in L1 cache as data sources Supports address when precise (Precise event)]
  mem_load_uops_retired.l2_hit                      
       [Retired load uops with L2 cache hits as data sources Spec update: BDM35. Supports address when precise (Precise event)]
  mem_load_uops_retired.l2_miss                     
       [Miss in mid-level (L2) cache. Excludes Unknown data-source Supports address when precise (Precise event)]
  mem_load_uops_retired.l3_hit                      
       [Retired load uops which data sources were data hits in L3 without snoops required Spec update: BDM100. Supports address when precise
        (Precise event)]
  mem_load_uops_retired.l3_miss                     
       [Miss in last-level (L3) cache. Excludes Unknown data-source Spec update: BDM100, BDE70. Supports address when precise (Precise
        event)]
  mem_uops_retired.all_loads                        
       [All retired load uops Supports address when precise (Precise event)]
  mem_uops_retired.all_stores                       
       [All retired store uops Supports address when precise (Precise event)]
  mem_uops_retired.lock_loads                       
       [Retired load uops with locked access Spec update: BDM35. Supports address when precise (Precise event)]
  mem_uops_retired.split_loads                      
       [Retired load uops that split across a cacheline boundary Supports address when precise (Precise event)]
  mem_uops_retired.split_stores                     
       [Retired store uops that split across a cacheline boundary Supports address when precise (Precise event)]
  mem_uops_retired.stlb_miss_loads                  
       [Retired load uops that miss the STLB Supports address when precise (Precise event)]
  mem_uops_retired.stlb_miss_stores                 
       [Retired store uops that miss the STLB Supports address when precise (Precise event)]
  offcore_requests.all_data_rd                      
       [Demand and prefetch data reads]
  offcore_requests.demand_code_rd                   
       [Cacheable and noncachaeble code read requests]
  offcore_requests.demand_data_rd                   
       [Demand Data Read requests sent to uncore]
  offcore_requests.demand_rfo                       
       [Demand RFO requests including regular RFOs, locks, ItoM]
  offcore_requests_buffer.sq_full                   
       [Offcore requests buffer cannot take more entries for this thread core]
  offcore_requests_outstanding.all_data_rd          
       [Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore Spec update: BDM76]
  offcore_requests_outstanding.cycles_with_data_rd  
       [Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore Spec update:
        BDM76]
  offcore_requests_outstanding.cycles_with_demand_data_rd
       [Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore Spec update: BDM76]
  offcore_requests_outstanding.cycles_with_demand_rfo
       [Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle Spec update: BDM76]
  offcore_requests_outstanding.demand_code_rd       
       [Offcore outstanding code reads transactions in SuperQueue (SQ), queue to uncore, every cycle Spec update: BDM76]
  offcore_requests_outstanding.demand_data_rd       
       [Offcore outstanding Demand Data Read transactions in uncore queue Spec update: BDM76]
  offcore_requests_outstanding.demand_data_rd_ge_6  
       [Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue Spec update: BDM76]
  offcore_requests_outstanding.demand_rfo           
       [Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore Spec update: BDM76]
  offcore_response                                  
       [Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_data_rd.any_response         
       [Counts all demand & prefetch data reads that have any response type]
  offcore_response.all_data_rd.l3_hit.any_snoop     
       [Counts all demand & prefetch data reads that hit in the L3]
  offcore_response.all_data_rd.l3_hit.snoop_hit_no_fwd
       [Counts all demand & prefetch data reads that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is
        not forwarded]
  offcore_response.all_data_rd.l3_hit.snoop_hitm    
       [ALL_DATA_RD & L3_HIT & SNOOP_HITM]
  offcore_response.all_data_rd.l3_hit.snoop_miss    
       [Counts all demand & prefetch data reads that hit in the L3 with a snoop miss response]
  offcore_response.all_data_rd.l3_hit.snoop_none    
       [Counts all demand & prefetch data reads that hit in the L3 with no details on snoop-related information]
  offcore_response.all_data_rd.l3_hit.snoop_not_needed
       [Counts all demand & prefetch data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is
        not set or the shared line is present in multiple cores]
  offcore_response.all_data_rd.supplier_none.any_snoop
       [ALL_DATA_RD & SUPPLIER_NONE & ANY_SNOOP]
  offcore_response.all_data_rd.supplier_none.snoop_hit_no_fwd
       [ALL_DATA_RD & SUPPLIER_NONE & SNOOP_HIT_NO_FWD]
  offcore_response.all_data_rd.supplier_none.snoop_hitm
       [ALL_DATA_RD & SUPPLIER_NONE & SNOOP_HITM]
  offcore_response.all_data_rd.supplier_none.snoop_miss
       [ALL_DATA_RD & SUPPLIER_NONE & SNOOP_MISS]
  offcore_response.all_data_rd.supplier_none.snoop_none
       [ALL_DATA_RD & SUPPLIER_NONE & SNOOP_NONE]
  offcore_response.all_data_rd.supplier_none.snoop_not_needed
       [ALL_DATA_RD & SUPPLIER_NONE & SNOOP_NOT_NEEDED]
  offcore_response.all_pf_code_rd.any_response      
       [Counts all prefetch code reads that have any response type]
  offcore_response.all_pf_code_rd.l3_hit.any_snoop  
       [Counts all prefetch code reads that hit in the L3]
  offcore_response.all_pf_code_rd.l3_hit.snoop_hit_no_fwd
       [Counts all prefetch code reads that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not
        forwarded]
  offcore_response.all_pf_code_rd.l3_hit.snoop_hitm 
       [ALL_PF_CODE_RD & L3_HIT & SNOOP_HITM]
  offcore_response.all_pf_code_rd.l3_hit.snoop_miss 
       [Counts all prefetch code reads that hit in the L3 with a snoop miss response]
  offcore_response.all_pf_code_rd.l3_hit.snoop_none 
       [Counts all prefetch code reads that hit in the L3 with no details on snoop-related information]
  offcore_response.all_pf_code_rd.l3_hit.snoop_not_needed
       [Counts all prefetch code reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or
        the shared line is present in multiple cores]
  offcore_response.all_pf_code_rd.supplier_none.any_snoop
       [ALL_PF_CODE_RD & SUPPLIER_NONE & ANY_SNOOP]
  offcore_response.all_pf_code_rd.supplier_none.snoop_hit_no_fwd
       [ALL_PF_CODE_RD & SUPPLIER_NONE & SNOOP_HIT_NO_FWD]
  offcore_response.all_pf_code_rd.supplier_none.snoop_hitm
       [ALL_PF_CODE_RD & SUPPLIER_NONE & SNOOP_HITM]
  offcore_response.all_pf_code_rd.supplier_none.snoop_miss
       [ALL_PF_CODE_RD & SUPPLIER_NONE & SNOOP_MISS]
  offcore_response.all_pf_code_rd.supplier_none.snoop_none
       [ALL_PF_CODE_RD & SUPPLIER_NONE & SNOOP_NONE]
  offcore_response.all_pf_code_rd.supplier_none.snoop_not_needed
       [ALL_PF_CODE_RD & SUPPLIER_NONE & SNOOP_NOT_NEEDED]
  offcore_response.all_pf_data_rd.any_response      
       [Counts all prefetch data reads that have any response type]
  offcore_response.all_pf_data_rd.l3_hit.any_snoop  
       [Counts all prefetch data reads that hit in the L3]
  offcore_response.all_pf_data_rd.l3_hit.snoop_hit_no_fwd
       [Counts all prefetch data reads that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not
        forwarded]
  offcore_response.all_pf_data_rd.l3_hit.snoop_hitm 
       [ALL_PF_DATA_RD & L3_HIT & SNOOP_HITM]
  offcore_response.all_pf_data_rd.l3_hit.snoop_miss 
       [Counts all prefetch data reads that hit in the L3 with a snoop miss response]
  offcore_response.all_pf_data_rd.l3_hit.snoop_none 
       [Counts all prefetch data reads that hit in the L3 with no details on snoop-related information]
  offcore_response.all_pf_data_rd.l3_hit.snoop_not_needed
       [Counts all prefetch data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or
        the shared line is present in multiple cores]
  offcore_response.all_pf_data_rd.supplier_none.any_snoop
       [ALL_PF_DATA_RD & SUPPLIER_NONE & ANY_SNOOP]
  offcore_response.all_pf_data_rd.supplier_none.snoop_hit_no_fwd
       [ALL_PF_DATA_RD & SUPPLIER_NONE & SNOOP_HIT_NO_FWD]
  offcore_response.all_pf_data_rd.supplier_none.snoop_hitm
       [ALL_PF_DATA_RD & SUPPLIER_NONE & SNOOP_HITM]
  offcore_response.all_pf_data_rd.supplier_none.snoop_miss
       [ALL_PF_DATA_RD & SUPPLIER_NONE & SNOOP_MISS]
  offcore_response.all_pf_data_rd.supplier_none.snoop_none
       [ALL_PF_DATA_RD & SUPPLIER_NONE & SNOOP_NONE]
  offcore_response.all_pf_data_rd.supplier_none.snoop_not_needed
       [ALL_PF_DATA_RD & SUPPLIER_NONE & SNOOP_NOT_NEEDED]
  offcore_response.all_pf_rfo.any_response          
       [Counts prefetch RFOs that have any response type]
  offcore_response.all_pf_rfo.l3_hit.any_snoop      
       [Counts prefetch RFOs that hit in the L3]
  offcore_response.all_pf_rfo.l3_hit.snoop_hit_no_fwd
       [Counts prefetch RFOs that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded]
  offcore_response.all_pf_rfo.l3_hit.snoop_hitm     
       [ALL_PF_RFO & L3_HIT & SNOOP_HITM]
  offcore_response.all_pf_rfo.l3_hit.snoop_miss     
       [Counts prefetch RFOs that hit in the L3 with a snoop miss response]
  offcore_response.all_pf_rfo.l3_hit.snoop_none     
       [Counts prefetch RFOs that hit in the L3 with no details on snoop-related information]
  offcore_response.all_pf_rfo.l3_hit.snoop_not_needed
       [Counts prefetch RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared
        line is present in multiple cores]
  offcore_response.all_pf_rfo.supplier_none.any_snoop
       [ALL_PF_RFO & SUPPLIER_NONE & ANY_SNOOP]
  offcore_response.all_pf_rfo.supplier_none.snoop_hit_no_fwd
       [ALL_PF_RFO & SUPPLIER_NONE & SNOOP_HIT_NO_FWD]
  offcore_response.all_pf_rfo.supplier_none.snoop_hitm
       [ALL_PF_RFO & SUPPLIER_NONE & SNOOP_HITM]
  offcore_response.all_pf_rfo.supplier_none.snoop_miss
       [ALL_PF_RFO & SUPPLIER_NONE & SNOOP_MISS]
  offcore_response.all_pf_rfo.supplier_none.snoop_none
       [ALL_PF_RFO & SUPPLIER_NONE & SNOOP_NONE]
  offcore_response.all_pf_rfo.supplier_none.snoop_not_needed
       [ALL_PF_RFO & SUPPLIER_NONE & SNOOP_NOT_NEEDED]
  offcore_response.all_rfo.any_response             
       [Counts all demand & prefetch RFOs that have any response type]
  offcore_response.all_rfo.l3_hit.any_snoop         
       [Counts all demand & prefetch RFOs that hit in the L3]
  offcore_response.all_rfo.l3_hit.snoop_hit_no_fwd  
       [Counts all demand & prefetch RFOs that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not
        forwarded]
  offcore_response.all_rfo.l3_hit.snoop_hitm        
       [ALL_RFO & L3_HIT & SNOOP_HITM]
  offcore_response.all_rfo.l3_hit.snoop_miss        
       [Counts all demand & prefetch RFOs that hit in the L3 with a snoop miss response]
  offcore_response.all_rfo.l3_hit.snoop_none        
       [Counts all demand & prefetch RFOs that hit in the L3 with no details on snoop-related information]
  offcore_response.all_rfo.l3_hit.snoop_not_needed  
       [Counts all demand & prefetch RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set
        or the shared line is present in multiple cores]
  offcore_response.all_rfo.supplier_none.any_snoop  
       [ALL_RFO & SUPPLIER_NONE & ANY_SNOOP]
  offcore_response.all_rfo.supplier_none.snoop_hit_no_fwd
       [ALL_RFO & SUPPLIER_NONE & SNOOP_HIT_NO_FWD]
  offcore_response.all_rfo.supplier_none.snoop_hitm 
       [ALL_RFO & SUPPLIER_NONE & SNOOP_HITM]
  offcore_response.all_rfo.supplier_none.snoop_miss 
       [ALL_RFO & SUPPLIER_NONE & SNOOP_MISS]
  offcore_response.all_rfo.supplier_none.snoop_none 
       [ALL_RFO & SUPPLIER_NONE & SNOOP_NONE]
  offcore_response.all_rfo.supplier_none.snoop_not_needed
       [ALL_RFO & SUPPLIER_NONE & SNOOP_NOT_NEEDED]
  offcore_response.corewb.any_response              
       [Counts writebacks (modified to exclusive) that have any response type]
  offcore_response.corewb.l3_hit.any_snoop          
       [Counts writebacks (modified to exclusive) that hit in the L3]
  offcore_response.corewb.l3_hit.snoop_hit_no_fwd   
       [Counts writebacks (modified to exclusive) that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is
        not forwarded]
  offcore_response.corewb.l3_hit.snoop_hitm         
       [COREWB & L3_HIT & SNOOP_HITM]
  offcore_response.corewb.l3_hit.snoop_miss         
       [Counts writebacks (modified to exclusive) that hit in the L3 with a snoop miss response]
  offcore_response.corewb.l3_hit.snoop_none         
       [Counts writebacks (modified to exclusive) that hit in the L3 with no details on 